@prefix av: <http://w3id.org/abecto/vocabulary#> .
@prefix p-plan: <http://purl.org/net/p-plan#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix abecto: <java:de.uni_jena.cs.fusion.abecto.processor.> .
@prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudtUnit: <http://qudt.org/vocab/unit/> .
@prefix sweetUnit: <http://sweetontology.net/reprSciUnits/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

_:plan a av:Plan ;
    rdfs:label "Unit Ontology Comparison"@en;
    .

_:aspectUnit a av:Aspect ;
    av:keyVariableName "unit" ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectUnit ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:definingQuery """
        PREFIX om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        SELECT ?unit ?label ?symbol ?definition ?quantityKind ?ucum ?sameAs ?zeroAt ?oneEqualsOfBase
        WHERE {
            ?unit a/rdfs:subClassOf* om:Unit .
            OPTIONAL { ?unit rdfs:label|om:alternativeLabel  ?label }
            OPTIONAL { ?unit om:symbol ?symbol }
            OPTIONAL { ?unit rdfs:comment ?definition }
            OPTIONAL { ?unit ^om:commonlyHasUnit ?quantityKind }
            OPTIONAL {
                ?unit skos:notation ?ucumTmp .
                BIND(str(?ucumTmp) AS ?ucum)
            }
            OPTIONAL { ?unit owl:sameAs ?sameAs }
            OPTIONAL { ?unit <tmp:oneEqualsOfBase> ?oneEqualsOfBase }
            OPTIONAL {
                ?unit ^om:hasUnit/om:hasOff-Set ?offset .
                BIND(?offset*-1.0 AS ?zeroAt)
            }
        }
    """^^av:SparqlQuery ;
    av:hasVariablePath
        [ a av:VariablePath ; av:propertyPath "<http://www.w3.org/2004/02/skos/core#notation>"^^av:SparqlPropertyPath ; av:variableName "ucum" ],
        [ a av:VariablePath ; av:propertyPath "^<http://www.ontology-of-units-of-measure.org/resource/om-2/hasUnit>/<http://www.ontology-of-units-of-measure.org/resource/om-2/hasOff-Set>"^^av:SparqlPropertyPath ; av:variableName "offset" ] ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectUnit ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:definingQuery """
        PREFIX qudt: <http://qudt.org/schema/qudt/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        SELECT ?unit ?label ?symbol ?definition ?quantityKind ?ucum ?sameAs ?zeroAt ?oneEqualsOfBase
        WHERE {
            ?unit a/rdfs:subClassOf* qudt:Unit .
            OPTIONAL { ?unit qudt:description ?definition }
            OPTIONAL { ?unit qudt:symbol ?symbol }
            OPTIONAL { { ?unit rdfs:label ?label } UNION { ?unit skos:prefLabel ?label } UNION { ?unit skos:altLabel ?label } }
            OPTIONAL { ?unit qudt:hasQuantityKind ?quantityKind }
            OPTIONAL {
                ?unit qudt:ucumCode ?ucumTmp .
                BIND(str(?ucumTmp) AS ?ucum)
            }
            OPTIONAL { ?unit qudt:omUnit ?sameAs }
            OPTIONAL { ?unit qudt:conversionMultiplier ?oneEqualsOfBase }
            OPTIONAL { ?unit qudt:conversionOffset ?zeroAt }
        }
    """^^av:SparqlQuery ;
    av:hasVariablePath
        [ a av:VariablePath ; av:propertyPath "<http://qudt.org/schema/qudt/ucumCode>"^^av:SparqlPropertyPath ; av:variableName "ucum" ] ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectUnit ;
    av:associatedDataset <http://sweetontology.net/> ;
    av:definingQuery """
        PREFIX sweetUnit: <http://sweetontology.net/relaSci/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        SELECT ?unit ?label ?symbol ?ucum ?zeroAt ?oneEqualsOfBase
        WHERE {
            ?unit a/rdfs:subClassOf* sweetUnit:Unit .
            OPTIONAL { ?unit rdfs:label ?label }
            OPTIONAL { ?unit sweetUnit:hasSymbol ?symbol }
            OPTIONAL { ?unit skos:notation ?ucum }
            OPTIONAL { ?unit <tmp:oneEqualsOfBase> ?oneEqualsOfBase }
            OPTIONAL { ?unit <tmp:zeroAtOfBase> ?zeroAt }
        }
    """^^av:SparqlQuery ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectUnit ;
    av:associatedDataset <http://www.wikidata.org/> ;
    av:definingQuery """
		PREFIX p: <http://www.wikidata.org/prop/>
		PREFIX psv: <http://www.wikidata.org/prop/statement/value/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        PREFIX wikibase: <http://wikiba.se/ontology#>
        PREFIX wdt: <http://www.wikidata.org/prop/direct/>
        PREFIX wd: <http://www.wikidata.org/entity/>
        SELECT ?unit ?label ?symbol ?quantityKind ?ucum ?oneEqualsOfBase
        WHERE {
            ?unit wdt:P31/wdt:P279* wd:Q47574 . # units of measurement
            #FILTER(NOT EXISTS { ?unit wdt:P31/wdt:P279* wd:Q8142 }) # without currencies
            #FILTER(NOT EXISTS { ?unit wdt:P31/wdt:P279* wd:Q11639620 }) # without monetary subunits
            {?unit rdfs:label ?label } UNION { ?unit skos:altLabel ?label }
            OPTIONAL { ?unit wdt:P5061 ?symbol }
            OPTIONAL { ?unit wdt:P111 ?quantityKind }
            OPTIONAL { ?unit wdt:P7825 ?ucum }
            OPTIONAL { ?unit p:P2442/psv:P2442/wikibase:quantityAmount ?oneEqualsOfBase }
        }
    """^^av:SparqlQuery ;
    .

_:aspectQuantityKind a av:Aspect ;
    av:keyVariableName "quantityKind" ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectQuantityKind ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:definingQuery """
        PREFIX om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl: <http://www.w3.org/2002/07/owl#>
        SELECT ?quantityKind ?label ?amountOfSubstanceDimensionExponent ?electricCurrentDimensionExponent ?lengthDimensionExponent ?luminousIntensityDimensionExponent ?massDimensionExponent ?temperatureDimensionExponent ?timeDimensionExponent
        WHERE {
            ?quantityKind
                rdfs:subClassOf
                    om:Quantity ;
                rdfs:label
                    ?label ;
                om:symbol
                    ?symbol .
            OPTIONAL {
                ?quantityKind
                    rdfs:subClassOf [
                        a owl:Restriction ;
                        owl:onProperty om:hasDimension ;
                        owl:hasValue [
                            a om:Dimension ;
                            om:hasSIAmountOfSubstanceDimensionExponent        ?amountOfSubstanceDimensionExponent ;
                            om:hasSIElectricCurrentDimensionExponent          ?electricCurrentDimensionExponent ;
                            om:hasSILengthDimensionExponent                   ?lengthDimensionExponent ;
                            om:hasSILuminousIntensityDimensionExponent        ?luminousIntensityDimensionExponent ;
                            om:hasSIMassDimensionExponent                     ?massDimensionExponent ;
                            om:hasSIThermodynamicTemperatureDimensionExponent ?temperatureDimensionExponent ;
                            om:hasSITimeDimensionExponent                     ?timeDimensionExponent
                        ]
                    ] .
            }
        }
    """^^av:SparqlQuery ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectQuantityKind ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:definingQuery """
        PREFIX qudt: <http://qudt.org/schema/qudt/>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        SELECT ?quantityKind ?label ?symbol ?amountOfSubstanceDimensionExponent ?electricCurrentDimensionExponent ?lengthDimensionExponent ?luminousIntensityDimensionExponent ?massDimensionExponent ?temperatureDimensionExponent ?timeDimensionExponent
        WHERE {
            ?quantityKind a qudt:QuantityKind ;
                          rdfs:label ?label ;
                          qudt:symbol ?symbol ;
                          qudt:hasDimensionVector ?dimensionVector .
            ?dimensionVector a/rdfs:subClassOf*                                qudt:QuantityKindDimensionVector ;
                             qudt:dimensionExponentForAmountOfSubstance        ?amountOfSubstanceDimensionExponent ;
                             qudt:dimensionExponentForElectricCurrent          ?electricCurrentDimensionExponent ;
                             qudt:dimensionExponentForLength                   ?lengthDimensionExponent ;
                             qudt:dimensionExponentForLuminousIntensity        ?luminousIntensityDimensionExponent ;
                             qudt:dimensionExponentForMass                     ?massDimensionExponent ;
                             qudt:dimensionExponentForThermodynamicTemperature ?temperatureDimensionExponent ;
                             qudt:dimensionExponentForTime                     ?timeDimensionExponent ;
                             qudt:dimensionlessExponent                        ?dimensionlessExponent .
        }
    """^^av:SparqlQuery ;
    .
[]  a av:AspectPattern ;
    av:ofAspect _:aspectQuantityKind ;
    av:associatedDataset <http://www.wikidata.org/> ;
    av:definingQuery """
        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX wdt: <http://www.wikidata.org/prop/direct/>
        SELECT ?quantityKind ?label ?symbol ?amountOfSubstanceDimensionExponent ?electricCurrentDimensionExponent ?lengthDimensionExponent ?luminousIntensityDimensionExponent ?massDimensionExponent ?temperatureDimensionExponent ?timeDimensionExponent
        WHERE {
            { ?quantityKind rdfs:label ?label } UNION { ?quantityKind skos:altLabel ?label }
            OPTIONAL { ?quantityKind wdt:P7973 ?symbol }
            ?quantityKind wdt:P4020 ?dimensionLabel .
            BIND(STRBEFORE(STRAFTER(STR(?dimensionLabel),"<annotation encoding=\\"application/x-tex\\">{\\\\displaystyle {"),"}</annotation>") AS ?dimensionLabelTex)
            BIND(REPLACE(?dimensionLabelTex,"\\\\\\\\mathsf \\\\{\\\\s*(\\\\S+)\\\\s*}}\\\\s*(\\\\{|$)","\\\\\\\\mathsf {$1}}^{1}$2") AS ?dimensionLabelTexWithOnes)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {N}}^{"),"}")),0) AS ?amountOfSubstanceDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {I}}^{"),"}")),0) AS ?electricCurrentDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {L}}^{"),"}")),0) AS ?lengthDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {J}}^{"),"}")),0) AS ?luminousIntensityDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {M}}^{"),"}")),0) AS ?massDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {\\\\Theta}}^{"),"}")),0) AS ?temperatureDimensionExponent)
            BIND(COALESCE(xsd:integer(STRBEFORE(STRAFTER(?dimensionLabelTexWithOnes,"\\\\mathsf {T}}^{"),"}")),0) AS ?timeDimensionExponent)
        }
    """^^av:SparqlQuery ;
    av:hasVariablePath
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "amountOfSubstanceDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "electricCurrentDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "lengthDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "luminousIntensityDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "massDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "temperatureDimensionExponent" ] ,
        [ a av:VariablePath ; av:propertyPath "<http://www.wikidata.org/prop/direct/P4020>"^^av:SparqlPropertyPath ; av:variableName "timeDimensionExponent" ] ;
    .

_:om2Source a av:Step ;
    rdfs:label "Load OM2"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:hasParameter [av:key "url" ; av:value <https://raw.githubusercontent.com/HajoRijgersberg/OM/master/om-2.0.rdf> ] ;
    .
_:om2SourceUcum a av:Step ;
    rdfs:label "Load OM2"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:hasParameter [av:key "url" ; av:value <https://raw.githubusercontent.com/HajoRijgersberg/OM/master/om-2-ucum.ttl> ] ;
    .

_:qudt2Sourcequdt a av:Step ;
    rdfs:label "Load QUDT2 Schema"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/schema/qudt> ] ;
    .
_:qudt2Sourcedatatype a av:Step ;
    rdfs:label "Load QUDT2 Datatypes"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/schema/datatype> ] ;
    .
_:qudt2Sourceconstant a av:Step ;
    rdfs:label "Load QUDT2 Constants"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/constant> ] ;
    .
_:qudt2Sourcediscipline a av:Step ;
    rdfs:label "Load QUDT2 Disciplines"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/discipline> ] ;
    .
_:qudt2Sourcedimensionvector a av:Step ;
    rdfs:label "Load QUDT2 Dimension Vectors"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/dimensionvector> ] ;
    .
_:qudt2Sourcequantitykind a av:Step ;
    rdfs:label "Load QUDT2 Quantity Kinds"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/quantitykind> ] ;
    .
_:qudt2Sourcesuo a av:Step ;
    rdfs:label "Load QUDT2 Systems of Units"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/sou> ] ;
    .
_:qudt2Sourceunit a av:Step ;
    rdfs:label "Load QUDT2 Units"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter [av:key "url" ; av:value <http://qudt.org/2.1/vocab/unit> ] ;
    .

_:sweet3SourceUnits a av:Step ;
    rdfs:label "Load SWEET3 Units"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UrlSourceProcessor ;
    av:associatedDataset <http://sweetontology.net/> ;
    av:hasParameter [av:key "url" ; av:value <http://sweetontology.net/reprSciUnits> ] ;
    .

_:wikidataSource a av:Step ;
    rdfs:label "Load Wikidata"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:SparqlSourceProcessor ;
    av:associatedDataset <http://www.wikidata.org/> ;
    av:hasParameter
        [av:key "service" ; av:value <https://query.wikidata.org/sparql> ] ,
        [av:key "query" ; av:value """
                PREFIX wdt: <http://www.wikidata.org/prop/direct/>
                PREFIX wd: <http://www.wikidata.org/entity/>
                SELECT *
                WHERE {
                    {
                        # units of measurement
                        ?item wdt:P31/wdt:P279* wd:Q47574 .
                        FILTER(NOT EXISTS { ?item wdt:P31/wdt:P279* wd:Q8142 }) # without currencies
                        FILTER(NOT EXISTS { ?item wdt:P31/wdt:P279* wd:Q11639620 }) # without monetary subunits
                    }
                    UNION
                    {
                        # quantity kind
                        ?item wdt:P4020 [] .
                    }
                }
            """^^av:SparqlQuery ] ,
        [av:key "chunkSize" ; av:value 100 ] ,
        [av:key "followUnlimited" ; av:value
            <http://www.wikidata.org/prop/direct/P279> ,
            <http://www.wikidata.org/prop/statement/value/P2442> ,
            <http://www.wikidata.org/prop/P2442> ] ,
        [av:key "ignoreInverse" ; av:value
            <http://wikiba.se/ontology#quantityUnit>,
            <http://www.wikidata.org/prop/qualifier/P642>,
            <http://www.wikidata.org/prop/direct/P921>,
            <http://www.wikidata.org/prop/statement/P921>,
            <http://www.wikidata.org/prop/qualifier/P1013>,
            <http://www.wikidata.org/prop/direct/P111>,
            <http://www.wikidata.org/prop/statement/P111>,
            <http://www.wikidata.org/prop/statement/P31>,
            <http://www.wikidata.org/prop/direct/P31>,
            <http://www.wikidata.org/prop/statement/P971>,
            <http://www.wikidata.org/prop/direct/P971>,
            <http://www.wikidata.org/prop/statement/P2670>,
            <http://www.wikidata.org/prop/direct/P2670>,
            <http://www.wikidata.org/prop/statement/P360>,
            <http://www.wikidata.org/prop/direct/P360>,
            <http://www.wikidata.org/prop/statement/P4224>,
            <http://www.wikidata.org/prop/direct/P4224>,
            <http://schema.org/about> ]
    .

_:om2additionalLabels a av:Step ;
    rdfs:label "Additional Labels for OM2"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:SparqlConstructProcessor ;
    p-plan:isPrecededBy _:om2Source, _:om2SourceUcum ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:hasParameter
        [av:key "query" ; av:value """
                PREFIX om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>
                PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                CONSTRUCT {
                    ?unit rdfs:label ?labelVariation .
                } WHERE {
                    ?unit a/rdfs:subClassOf* om:Unit ;
                        rdfs:label|om:alternativeLabel ?label .
                    VALUES (?pattern ?replacement ?flags) {
                        ("British thermal unit"      "BTU"             "i") # replace with acronym
                        ("metre( |$)"                "meter$1"         "i") # unify British and American writing
                        ("litre( |$)"                "liter$1"         "i") # unify British and American writing
                        ("(^| )square ([^ ]*)( |$)"  "$1$2 squared$3"  "i") # unify syntax for squared units
                        ("(^| )cubic ([^ ]*)( |$)"   "$1$2 cubed$3"    "i") # unify syntax for cubic units
                        ("(^| )([^ ]*)metres( |$)"   "$1$2meter$3"     "i") # unify plural writing
                        ("(^| )deka"                 "$1deca"          "i") # unify use of prefix
                        ("(^| )piko"                 "$1pico"          "i") # unify use of prefix
                        ("(^| )mikro"                "$1micro"         "i") # unify use of prefix
                        ("(^| )nautical"             "$1nautic"        "i") # unify nautic and nautical
                        ("(^| )reciprocal( |$)"      "$1per$2"         "i") # unify per and reciprocal
                }
                BIND(REPLACE(?label, ?pattern, ?replacement,  ?flags) AS ?labelVariation )
                FILTER NOT EXISTS {?unit rdfs:label|om:alternativeLabel ?labelVariation }
                }
            """^^av:SparqlQuery ] ,
        [av:key "maxIterations" ; av:value 10 ] ;
    .

_:qudt2additionalLabels a av:Step ;
    rdfs:label "Additional Labels for QUDT2"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:SparqlConstructProcessor ;
    p-plan:isPrecededBy _:qudt2Sourcequdt, _:qudt2Sourcedatatype, _:qudt2Sourceconstant, _:qudt2Sourcediscipline, _:qudt2Sourcedimensionvector, _:qudt2Sourcequantitykind, _:qudt2Sourcesuo, _:qudt2Sourceunit ;
    av:associatedDataset <http://qudt.org/2.1/> ;
    av:hasParameter
        [av:key "query" ; av:value """
                PREFIX qudt: <http://qudt.org/schema/qudt/>
                PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
                CONSTRUCT {
                    ?unit rdfs:label ?labelVariation .
                } WHERE {
                    ?unit a/rdfs:subClassOf* qudt:Unit ;
                        rdfs:label|skos:prefLabel|skos:altLabel ?label .
                    VALUES (?pattern ?replacement ?flags) {
                        ("British thermal unit"      "BTU"             "i") # replace with acronym
                        ("metre( |$)"                "meter$1"         "i") # unify British and American writing
                        ("litre( |$)"                "liter$1"         "i") # unify British and American writing
                        ("(^| )square ([^ ]*)( |$)"  "$1$2 squared$3"  "i") # unify syntax for squared units
                        ("(^| )cubic ([^ ]*)( |$)"   "$1$2 cubed$3"    "i") # unify syntax for cubic units
                        ("(^| )([^ ]*)metres( |$)"   "$1$2meter$3"     "i") # unify plural writing
                        ("(^| )deka"                 "$1deca"          "i") # unify use of prefix
                        ("(^| )piko"                 "$1pico"          "i") # unify use of prefix
                        ("(^| )mikro"                "$1micro"         "i") # unify use of prefix
                        ("(^| )nautical"             "$1nautic"        "i") # unify nautic and nautical
                        ("(^| )reciprocal( |$)"      "$1per$2"         "i") # unify per and reciprocal
                }
                BIND(REPLACE(?label, ?pattern, ?replacement,  ?flags) AS ?labelVariation )
                FILTER NOT EXISTS {?unit rdfs:label|skos:prefLabel|skos:altLabel ?labelVariation }
                }
            """^^av:SparqlQuery ] ,
        [av:key "maxIterations" ; av:value 10 ] ;
    .

_:sweet3additionalLabels a av:Step ;
    rdfs:label "Additional Labels for SWEET3"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:SparqlConstructProcessor ;
    p-plan:isPrecededBy _:sweet3SourceUnits ;
    av:associatedDataset <http://sweetontology.net/> ;
    av:hasParameter
        [av:key "query" ; av:value """
                PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
                PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
                PREFIX sweetUnit: <http://sweetontology.net/relaSci/>
                CONSTRUCT {
                    ?unit rdfs:label ?labelVariation .
                } WHERE {
                    ?unit a/rdfs:subClassOf* sweetUnit:Unit ;
                        rdfs:label ?label .
                    VALUES (?pattern ?replacement ?flags) {
                        ("British thermal unit"      "BTU"             "i") # replace with acronym
                        ("metre( |$)"                "meter$1"         "i") # unify British and American writing
                        ("litre( |$)"                "liter$1"         "i") # unify British and American writing
                        ("(^| )square ([^ ]*)( |$)"  "$1$2 squared$3"  "i") # unify syntax for squared units
                        ("(^| )cubic ([^ ]*)( |$)"   "$1$2 cubed$3"    "i") # unify syntax for cubic units
                        ("(^| )([^ ]*)metres( |$)"   "$1$2meter$3"     "i") # unify plural writing
                        ("(^| )deka"                 "$1deca"          "i") # unify use of prefix
                        ("(^| )piko"                 "$1pico"          "i") # unify use of prefix
                        ("(^| )mikro"                "$1micro"         "i") # unify use of prefix
                        ("(^| )nautical"             "$1nautic"        "i") # unify nautic and nautical
                        ("(^| )reciprocal( |$)"      "$1per$2"         "i") # unify per and reciprocal
                }
                BIND(REPLACE(?label, ?pattern, ?replacement,  ?flags) AS ?labelVariation )
                FILTER NOT EXISTS {?unit rdfs:label ?labelVariation }
                }
            """^^av:SparqlQuery ] ,
        [av:key "maxIterations" ; av:value 10 ] ;
    .

_:om2conversions a av:Step ;
    rdfs:label "OM2 Conversions Closure"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:FBRuleReasoningProcessor ;
    p-plan:isPrecededBy _:om2additionalLabels ;
    av:associatedDataset <http://www.ontology-of-units-of-measure.org/resource/om-2/> ;
    av:hasParameter
        [av:key "rules" ; av:value """
            @prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>.
            [baseUnits: (om:InternationalSystemOfUnits om:hasBaseUnit ?unit) -> (?unit <tmp:oneEqualsOfBase> 1.0) ]
            [fractionUnits: (?unit3 om:hasNumerator ?numerator), (?unit3 om:hasDenominator ?denominator), (?numerator <tmp:oneEqualsOfBase> ?oneEqualsNumerator), (?denominator <tmp:oneEqualsOfBase> ?oneEqualsDenominator), quotient(?oneEqualsNumerator, ?oneEqualsDenominator, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [prefixUnits: (?unit om:hasUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference) (?unit om:hasPrefix ?prefix), (?prefix om:hasFactor ?prefixFactor), product(?oneEqualsOfReference, ?prefixFactor, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [squareUnits: (?unit om:hasBase ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit om:hasExponent 2), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [cubicUnits: (?unit om:hasBase ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit om:hasExponent 3), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), product(?oneEqualsOfReference, ?square, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalUnits: (?unit om:hasBase ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit om:hasExponent -1), quotient(1, ?oneEqualsOfReference, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalSquareUnits: (?unit om:hasBase ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit om:hasExponent -2), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), quotient(1, ?square, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalcubicUnits: (?unit om:hasBase ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit om:hasExponent -3), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), product(?oneEqualsOfReference, ?square, ?cubic), quotient(1, ?cubic, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
        """ ] ;
    .

_:sweet3conversions a av:Step ;
    rdfs:label "SWEET3 Conversions Closure"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:FBRuleReasoningProcessor ;
    p-plan:isPrecededBy _:sweet3additionalLabels ;
    av:associatedDataset <http://sweetontology.net/> ;
    av:hasParameter
        [av:key "rules" ; av:value """
            @prefix sorelm: <http://sweetontology.net/relaMath/> .
            @prefix sorelsc: <http://sweetontology.net/relaSci/> .
            @prefix sorepsu: <http://sweetontology.net/reprSciUnits/> .
            [baseUnits: (?unit a sorepsu:BaseUnit) -> (?unit <tmp:oneEqualsOfBase> "1.0"^^xsd:double), (?unit <tmp:zeroAtOfBase> "0.0"^^xsd:double) ]
            [scaledUnits: (?unit a sorepsu:UnitDerivedByScaling), (?unit sorelm:hasScalingNumber ?scalingNumber), (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsReference), (?referenceUnit <tmp:zeroAtOfBase> ?zeroAtOfBase), product(?scalingNumber, ?oneEqualsReference, ?oneEqualsOfBase) -> (?unit <tmp:oneEqualsOfBase> ?oneEqualsOfBase), (?unit <tmp:zeroAtOfBase> ?zeroAtOfBase) ]
            [shiftedUnits: (?unit a sorepsu:UnitDerivedByShifting), (?unit sorelm:hasScalingNumber ?scalingNumber), (?unit sorelm:hasShiftingNumber ?shiftingNumber), (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsReference), (?referenceUnit <tmp:zeroAtOfBase> ?zeroAtReference), product(?scalingNumber, ?oneEqualsReference, ?oneEqualsOfBase), difference(?shiftingNumber, ?oneEqualsReference, ?scaledShiftingNumber), sum(?zeroAtReference, ?scaledShiftingNumber, ?zeroAtOfBase) -> (?unit <tmp:oneEqualsOfBase> ?oneEqualsOfBase), (?unit <tmp:zeroAtOfBase> ?zeroAtOfBase) ]
            [shiftedUnitsWithoutScalingNumber: (?unit a sorepsu:UnitDerivedByShifting), noValue(?unit, sorelm:hasScalingNumber), (?unit sorelm:hasShiftingNumber ?shiftingNumber), (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfBase), (?referenceUnit <tmp:zeroAtOfBase> ?zeroAtReference), difference(?shiftingNumber, ?oneEqualsReference, ?scaledShiftingNumber), sum(?zeroAtReference, ?scaledShiftingNumber, ?zeroAtOfBase) -> (?unit <tmp:oneEqualsOfBase> ?oneEqualsOfBase), (?unit <tmp:zeroAtOfBase> ?zeroAtOfBase) ]
            [squareUnits: (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit sorelm:toThePower 2), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [cubicUnits: (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit sorelm:toThePower 3), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), product(?oneEqualsOfReference, ?square, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalUnits: (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit sorelm:toThePower -1), quotient(1, ?oneEqualsOfReference, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalSquareUnits: (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit sorelm:toThePower -2), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), quotient(1, ?square, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [reciprocalcubicUnits: (?unit sorelsc:hasBaseUnit ?referenceUnit), (?referenceUnit <tmp:oneEqualsOfBase> ?oneEqualsOfReference), (?unit sorelm:toThePower -3), product(?oneEqualsOfReference, ?oneEqualsOfReference, ?square), product(?oneEqualsOfReference, ?square, ?cubic), quotient(1, ?cubic, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
            [productOf2Units: (?unit a sorepsu:UnitDefinedByProduct), (?unit sorelm:hasOperand ?referenceUnit1), (?unit sorelm:hasOperand ?referenceUnit2), noValue(?unit sorelm:hasOperand ?referenceUnit3), notEqual(?referenceUnit1, ?referenceUnit2), notEqual(?referenceUnit1, ?referenceUnit3), notEqual(?referenceUnit2, ?referenceUnit3), (?referenceUnit1 <tmp:oneEqualsOfBase> ?oneEqualsOfReference1), (?referenceUnit2 <tmp:oneEqualsOfBase> ?oneEqualsOfReference2), product(?oneEqualsOfReference1, ?oneEqualsOfReference2, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals)
            ]
            [productOf3Units: (?unit a sorepsu:UnitDefinedByProduct), (?unit sorelm:hasOperand ?referenceUnit1), (?unit sorelm:hasOperand ?referenceUnit2), (?unit sorelm:hasOperand ?referenceUnit3), noValue(?unit sorelm:hasOperand ?referenceUnit4), notEqual(?referenceUnit1, ?referenceUnit2), notEqual(?referenceUnit1, ?referenceUnit3), notEqual(?referenceUnit1, ?referenceUnit4), notEqual(?referenceUnit2, ?referenceUnit3), notEqual(?referenceUnit2, ?referenceUnit4), notEqual(?referenceUnit3, ?referenceUnit4), (?referenceUnit1 <tmp:oneEqualsOfBase> ?oneEqualsOfReference1), (?referenceUnit2 <tmp:oneEqualsOfBase> ?oneEqualsOfReference2), product(?oneEqualsOfReference1, ?oneEqualsOfReference2, ?oneEqualsTmp1) product(?oneEqualsTmp1, ?oneEqualsOfReference3, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals)
            ]
            [productOf4Units: (?unit a sorepsu:UnitDefinedByProduct), (?unit sorelm:hasOperand ?referenceUnit1), (?unit sorelm:hasOperand ?referenceUnit2), (?unit sorelm:hasOperand ?referenceUnit3), (?unit sorelm:hasOperand ?referenceUnit4), noValue(?unit sorelm:hasOperand ?referenceUnit5), notEqual(?referenceUnit1, ?referenceUnit2), notEqual(?referenceUnit1, ?referenceUnit3), notEqual(?referenceUnit1, ?referenceUnit4), notEqual(?referenceUnit1, ?referenceUnit5), notEqual(?referenceUnit2, ?referenceUnit3), notEqual(?referenceUnit2, ?referenceUnit4), notEqual(?referenceUnit2, ?referenceUnit5), notEqual(?referenceUnit3, ?referenceUnit4), notEqual(?referenceUnit3, ?referenceUnit5), notEqual(?referenceUnit4, ?referenceUnit5), (?referenceUnit1 <tmp:oneEqualsOfBase> ?oneEqualsOfReference1), (?referenceUnit2 <tmp:oneEqualsOfBase> ?oneEqualsOfReference2), product(?oneEqualsOfReference1, ?oneEqualsOfReference2, ?oneEqualsTmp1) product(?oneEqualsTmp1, ?oneEqualsOfReference3, ?oneEqualsTmp2) product(?oneEqualsTmp2, ?oneEqualsOfReference4, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals)
            ]
            [productOf5Units: (?unit a sorepsu:UnitDefinedByProduct), (?unit sorelm:hasOperand ?referenceUnit1), (?unit sorelm:hasOperand ?referenceUnit2), (?unit sorelm:hasOperand ?referenceUnit3), (?unit sorelm:hasOperand ?referenceUnit4), (?unit sorelm:hasOperand ?referenceUnit5), noValue(?unit sorelm:hasOperand ?referenceUnit6), notEqual(?referenceUnit1, ?referenceUnit2), notEqual(?referenceUnit1, ?referenceUnit3), notEqual(?referenceUnit1, ?referenceUnit4), notEqual(?referenceUnit1, ?referenceUnit5), notEqual(?referenceUnit1, ?referenceUnit6), notEqual(?referenceUnit2, ?referenceUnit3), notEqual(?referenceUnit2, ?referenceUnit4), notEqual(?referenceUnit2, ?referenceUnit5), notEqual(?referenceUnit2, ?referenceUnit6), notEqual(?referenceUnit3, ?referenceUnit4), notEqual(?referenceUnit3, ?referenceUnit5), notEqual(?referenceUnit3, ?referenceUnit6), notEqual(?referenceUnit4, ?referenceUnit5), notEqual(?referenceUnit4, ?referenceUnit6), notEqual(?referenceUnit5, ?referenceUnit6), (?referenceUnit1 <tmp:oneEqualsOfBase> ?oneEqualsOfReference1), (?referenceUnit2 <tmp:oneEqualsOfBase> ?oneEqualsOfReference2), product(?oneEqualsOfReference1, ?oneEqualsOfReference2, ?oneEqualsTmp1) product(?oneEqualsTmp1, ?oneEqualsOfReference3, ?oneEqualsTmp2) product(?oneEqualsTmp2, ?oneEqualsOfReference4, ?oneEqualsTmp3) product(?oneEqualsTmp3, ?oneEqualsOfReference5, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals)
            ]
            [productOf6Units: (?unit a sorepsu:UnitDefinedByProduct), (?unit sorelm:hasOperand ?referenceUnit1), (?unit sorelm:hasOperand ?referenceUnit2), (?unit sorelm:hasOperand ?referenceUnit3), (?unit sorelm:hasOperand ?referenceUnit4), (?unit sorelm:hasOperand ?referenceUnit5), (?unit sorelm:hasOperand ?referenceUnit6), noValue(?unit sorelm:hasOperand ?referenceUnit7),
                notEqual(?referenceUnit1, ?referenceUnit2), notEqual(?referenceUnit1, ?referenceUnit3), notEqual(?referenceUnit1, ?referenceUnit4), notEqual(?referenceUnit1, ?referenceUnit5), notEqual(?referenceUnit1, ?referenceUnit6), notEqual(?referenceUnit1, ?referenceUnit7), notEqual(?referenceUnit2, ?referenceUnit3), notEqual(?referenceUnit2, ?referenceUnit4), notEqual(?referenceUnit2, ?referenceUnit5), notEqual(?referenceUnit2, ?referenceUnit6), notEqual(?referenceUnit2, ?referenceUnit7), notEqual(?referenceUnit3, ?referenceUnit4), notEqual(?referenceUnit3, ?referenceUnit5), notEqual(?referenceUnit3, ?referenceUnit6), notEqual(?referenceUnit3, ?referenceUnit7), notEqual(?referenceUnit4, ?referenceUnit5), notEqual(?referenceUnit4, ?referenceUnit6), notEqual(?referenceUnit4, ?referenceUnit7), notEqual(?referenceUnit5, ?referenceUnit6), notEqual(?referenceUnit5, ?referenceUnit7), notEqual(?referenceUnit6, ?referenceUnit7), (?referenceUnit1 <tmp:oneEqualsOfBase> ?oneEqualsOfReference1), (?referenceUnit2 <tmp:oneEqualsOfBase> ?oneEqualsOfReference2), product(?oneEqualsOfReference1, ?oneEqualsOfReference2, ?oneEqualsTmp1) product(?oneEqualsTmp1, ?oneEqualsOfReference3, ?oneEqualsTmp2) product(?oneEqualsTmp2, ?oneEqualsOfReference4, ?oneEqualsTmp3) product(?oneEqualsTmp3, ?oneEqualsOfReference5, ?oneEqualsTmp4) product(?oneEqualsTmp4, ?oneEqualsOfReference6, ?oneEquals) -> (?unit <tmp:oneEqualsOfBase> ?oneEquals) ]
        """ ] ;
    .

GRAPH _:manualCorrespondences
{
    om:one av:correspondsToResource qudtUnit:UNITLESS, sweetUnit:dimensionlessUnit .

    om:wattSquareMetre av:correspondsToResource qudtUnit:W-M2 .

    qudtUnit:DEG_C av:correspondsToResource sweetUnit:degreeC .
    qudtUnit:DEG_F av:correspondsToResource sweetUnit:degreeF .
    sweetUnit:MYA av:correspondsToResource sweetUnit:millenium .

    om:gray av:correspondsNotToResource om:microgray .
    om:kilofarad av:correspondsNotToResource om:kiloweber .
    om:metreKilogram av:correspondsNotToResource om:reciprocalGram .
    om:micrometre av:correspondsNotToResource om:micron .
    om:microsievert av:correspondsNotToResource om:sievert .

    om:acre-International av:correspondsNotToResource qudtUnit:MI .
    om:ampere av:correspondsNotToResource qudtUnit:A_Ab .
    om:centiare av:correspondsNotToResource qudtUnit:CentiBAR .
    om:centinewton av:correspondsNotToResource qudtUnit:CentiN-M .
    om:decinewton av:correspondsNotToResource qudtUnit:DeciN-M .
    om:decisiemens av:correspondsNotToResource qudtUnit:DeciS-PER-M .
    om:decitesla av:correspondsNotToResource qudtUnit:DeciB .
    om:dryPint-US av:correspondsNotToResource qudtUnit:PINT_UK .
    om:dryQuart-US av:correspondsNotToResource qudtUnit:QT_UK .
    om:exaampere av:correspondsNotToResource qudtUnit:MegaA .
    om:fluidOunce-US av:correspondsNotToResource qudtUnit:OZ_VOL_UK .
    om:gray av:correspondsNotToResource qudtUnit:MicroGRAY .
    om:horsepower-Water av:correspondsNotToResource qudtUnit:HP_Brake .
    om:kilofarad av:correspondsNotToResource qudtUnit:KiloBAR .
    om:kilogramPerHectare av:correspondsNotToResource qudtUnit:KiloGM-PER-M .
    om:kilotonne av:correspondsNotToResource qudtUnit:KiloP .
    om:kiloweber av:correspondsNotToResource qudtUnit:KiloBAR .
    om:megafarad av:correspondsNotToResource qudtUnit:MegaBAR .
    om:megagramPerLitre av:correspondsNotToResource qudtUnit:MegaGM-PER-M3 .
    om:micrometre av:correspondsNotToResource qudtUnit:MicroIN .
    om:micron av:correspondsNotToResource qudtUnit:MicroIN .
    om:micron av:correspondsNotToResource qudtUnit:MicroM .
    om:peck-US av:correspondsNotToResource qudtUnit:PK_UK .
    om:reciprocalSecond-Time av:correspondsNotToResource qudtUnit:HZ .
    om:second-TimePerSquareMetre av:correspondsNotToResource qudtUnit:PER-SEC-M2 .
    om:sievert av:correspondsNotToResource qudtUnit:MicroSV .
    om:sievert av:correspondsNotToResource qudtUnit:MicroSV-PER-HR .
    om:tonne av:correspondsNotToResource qudtUnit:TON_Metric .

    om:reciprocalPascalSecond-Time av:correspondsNotToResource sweetUnit:perPascal .
    om:second-TimePerSquareMetre av:correspondsNotToResource sweetUnit:perSecondSquared .

    qudtUnit:CAL_IT av:correspondsNotToResource qudtUnit:CAL_IT-PER-GM .
    qudtUnit:CAL_TH av:correspondsNotToResource qudtUnit:CAL_TH-PER-GM .
    qudtUnit:DWT av:correspondsNotToResource qudtUnit:QT_UK, qudtUnit:QT_US_DRY .
    qudtUnit:GAL_UK av:correspondsNotToResource qudtUnit:GAL_US .
    qudtUnit:GRAY av:correspondsNotToResource qudtUnit:MicroGRAY .
    qudtUnit:GON av:correspondsNotToResource qudtUnit:GR .
    [rdf:subject qudtUnit:GON ; rdf:predicate av:correspondsNotToResource ; rdf:object qudtUnit:GR] rdfs:seeAlso "https://github.com/qudt/qudt-public-repo/issues/26#issuecomment-566769784"^^xsd:anyURI .
    qudtUnit:HZ av:correspondsNotToResource qudtUnit:PER-SEC .
    qudtUnit:K-PER-MIN av:correspondsNotToResource qudtUnit:K-PER-W .
    qudtUnit:KiloGM-M-PER-SEC av:correspondsNotToResource qudtUnit:KiloGM-PER-SEC .
    qudtUnit:M-K av:correspondsNotToResource qudtUnit:M-PER-K .
    qudtUnit:M3-PER-DAY av:correspondsNotToResource qudtUnit:M3-PER-HR .
    qudtUnit:MHO_Stat av:correspondsNotToResource qudtUnit:S_Stat .
    qudtUnit:MI2 av:correspondsNotToResource qudtUnit:MilliM2 .
    qudtUnit:MicroIN av:correspondsNotToResource qudtUnit:MicroM .
    qudtUnit:MicroSV av:correspondsNotToResource qudtUnit:MicroSV-PER-HR, qudtUnit:SV .
    qudtUnit:OZ-FT av:correspondsNotToResource qudtUnit:OZ-IN .
    qudtUnit:OZ_VOL_UK av:correspondsNotToResource qudtUnit:OZ_VOL_US, qudtUnit:OZ_VOL_US-PER-DAY .
    qudtUnit:PER-FT3 av:correspondsNotToResource qudtUnit:PER-M3, qudtUnit:PER-MilliM3 .
    qudtUnit:PER-L av:correspondsNotToResource qudtUnit:PER-MIN, qudtUnit:PER-MO .
    qudtUnit:PER-M av:correspondsNotToResource qudtUnit:PER-WK .
    qudtUnit:PINT_UK av:correspondsNotToResource qudtUnit:PINT_US_DRY .
    qudtUnit:PINT_US av:correspondsNotToResource qudtUnit:PINT_US-PER-DAY .
    qudtUnit:PK_UK av:correspondsNotToResource qudtUnit:PK_US_DRY .
    qudtUnit:QT_US av:correspondsNotToResource qudtUnit:QT_US-PER-DAY .
    qudtUnit:W-M2 av:correspondsNotToResource qudtUnit:W-PER-FT2 .

    qudtUnit:A_Ab av:correspondsNotToResource sweetUnit:ampere .
    qudtUnit:C_Ab av:correspondsNotToResource sweetUnit:coulomb .
    qudtUnit:MicroIN av:correspondsNotToResource sweetUnit:micron .
    qudtUnit:PER-SEC-SR av:correspondsNotToResource sweetUnit:perSecondSquared .
    qudtUnit:PER-SEC-M2 av:correspondsNotToResource sweetUnit:perSecondSquared .
    sweetUnit:hertz av:correspondsNotToResource sweetUnit:perSecond .
    sweetUnit:micrometer av:correspondsNotToResource sweetUnit:micron .
    sweetUnit:million_km2 av:correspondsNotToResource sweetUnit:million_km3 .

    _:aspectUnit av:relevantResource
        <om:acre-International>, <om:ampere>, <om:centiare>, <om:centinewton>, <om:decinewton>, <om:decisiemens>, <om:decitesla>, <om:dryPint-US>, <om:dryQuart-US>, <om:exaampere>, <om:fluidOunce-US>, <om:gray>, <om:gray>, <om:horsepower-Water>, <om:kilofarad>, <om:kilofarad>, <om:kilogramPerHectare>, <om:kilotonne>, <om:kiloweber>, <om:kiloweber>, <om:megafarad>, <om:megagramPerLitre>, <om:metreKilogram>, <om:microgray>, <om:micrometre>, <om:micrometre>, <om:micron>, <om:micron>, <om:micron>, <om:microsievert>, <om:one>, <om:peck-US>, <om:reciprocalGram>, <om:reciprocalPascalSecond-Time>, <om:reciprocalSecond-Time>, <om:second-TimePerSquareMetre>, <om:second-TimePerSquareMetre>, <om:sievert>, <om:sievert>, <om:sievert>, <om:tonne>, <om:wattSquareMetre>, <qudtUnit:A_Ab>, <qudtUnit:A_Ab>, <qudtUnit:CAL_IT>, <qudtUnit:CAL_IT-PER-GM>, <qudtUnit:CAL_TH>, <qudtUnit:CAL_TH-PER-GM>, <qudtUnit:C_Ab>, <qudtUnit:CentiBAR>, <qudtUnit:CentiN-M>, <qudtUnit:DEG_C>, <qudtUnit:DEG_F>, <qudtUnit:DWT>, <qudtUnit:DeciB>, <qudtUnit:DeciN-M>, <qudtUnit:DeciS-PER-M>, <qudtUnit:GAL_UK>, <qudtUnit:GAL_US>, <qudtUnit:GON>, <qudtUnit:GR>, <qudtUnit:GRAY>, <qudtUnit:HP_Brake>, <qudtUnit:HZ>, <qudtUnit:HZ>, <qudtUnit:K-PER-MIN>, <qudtUnit:K-PER-W>, <qudtUnit:KiloBAR>, <qudtUnit:KiloBAR>, <qudtUnit:KiloGM-M-PER-SEC>, <qudtUnit:KiloGM-PER-M>, <qudtUnit:KiloGM-PER-SEC>, <qudtUnit:KiloP>, <qudtUnit:M-K>, <qudtUnit:M-PER-K>, <qudtUnit:M3-PER-DAY>, <qudtUnit:M3-PER-HR>, <qudtUnit:MHO_Stat>, <qudtUnit:MI>, <qudtUnit:MI2>, <qudtUnit:MegaA>, <qudtUnit:MegaBAR>, <qudtUnit:MegaGM-PER-M3>, <qudtUnit:MicroGRAY>, <qudtUnit:MicroGRAY>, <qudtUnit:MicroIN>, <qudtUnit:MicroIN>, <qudtUnit:MicroIN>, <qudtUnit:MicroIN>, <qudtUnit:MicroM>, <qudtUnit:MicroM>, <qudtUnit:MicroSV>, <qudtUnit:MicroSV>, <qudtUnit:MicroSV-PER-HR>, <qudtUnit:MicroSV-PER-HR>, <qudtUnit:MilliM2>, <qudtUnit:OZ-FT>, <qudtUnit:OZ-IN>, <qudtUnit:OZ_VOL_UK>, <qudtUnit:OZ_VOL_UK>, <qudtUnit:OZ_VOL_US>, <qudtUnit:OZ_VOL_US-PER-DAY>, <qudtUnit:PER-FT3>, <qudtUnit:PER-L>, <qudtUnit:PER-M>, <qudtUnit:PER-M3>, <qudtUnit:PER-MIN>, <qudtUnit:PER-MO>, <qudtUnit:PER-MilliM3>, <qudtUnit:PER-SEC>, <qudtUnit:PER-SEC-M2>, <qudtUnit:PER-SEC-M2>, <qudtUnit:PER-SEC-SR>, <qudtUnit:PER-WK>, <qudtUnit:PINT_UK>, <qudtUnit:PINT_UK>, <qudtUnit:PINT_US>, <qudtUnit:PINT_US-PER-DAY>, <qudtUnit:PINT_US_DRY>, <qudtUnit:PK_UK>, <qudtUnit:PK_UK>, <qudtUnit:PK_US_DRY>, <qudtUnit:QT_UK>, <qudtUnit:QT_UK>, <qudtUnit:QT_US>, <qudtUnit:QT_US-PER-DAY>, <qudtUnit:QT_US_DRY>, <qudtUnit:SV>, <qudtUnit:S_Stat>, <qudtUnit:TON_Metric>, <qudtUnit:UNITLESS>, <qudtUnit:W-M2>, <qudtUnit:W-M2>, <qudtUnit:W-PER-FT2>, <sweetUnit:MYA>, <sweetUnit:ampere>, <sweetUnit:coulomb>, <sweetUnit:degreeC>, <sweetUnit:degreeF>, <sweetUnit:dimensionlessUnit>, <sweetUnit:hertz>, <sweetUnit:micrometer>, <sweetUnit:micron>, <sweetUnit:micron>, <sweetUnit:millenium>, <sweetUnit:million_km2>, <sweetUnit:million_km3>, <sweetUnit:perPascal>, <sweetUnit:perSecond>, <sweetUnit:perSecondSquared>, <sweetUnit:perSecondSquared>, <sweetUnit:perSecondSquared> .
}

_:presentCorrespondences a av:Step ;
    rdfs:label "Present Correspondences"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:UsePresentMappingProcessor ;
    p-plan:isPrecededBy _:om2conversions, _:qudt2additionalLabels, _:sweet3conversions, _:wikidataSource ;
    av:predefinedMetaDataGraph _:manualCorrespondences ;
    av:hasParameter
        [av:key "aspect" ; av:value _:aspectUnit ] ,
        [av:key "variable" ; av:value "sameAs" ] ;
    .

_:unitUcumMapping a av:Step ;
    rdfs:label "Unit UCUM Mapping"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:EquivalentValueMappingProcessor ;
    p-plan:isPrecededBy _:presentCorrespondences ;
    av:hasParameter
        [av:key "aspect" ; av:value _:aspectUnit ] ,
        [av:key "variables" ; av:value "ucum" ] ;
    .

_:unitLabelMapping a av:Step ;
    rdfs:label "Unit Label Mapping"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:JaroWinklerMappingProcessor ;
    p-plan:isPrecededBy _:unitUcumMapping ;
    av:hasParameter
        [av:key "threshold" ; av:value 9e-1 ] ,
        [av:key "caseSensitive" ; av:value false ] ,
        [av:key "aspect" ; av:value _:aspectUnit ] ,
        [av:key "variables" ; av:value "label" ] ;
    .

_:completeness a av:Step;
    rdfs:label "Assess Completeness"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:CompletenessProcessor ;
    p-plan:isPrecededBy _:unitLabelMapping ;
    av:hasParameter
        [av:key "aspects" ; av:value _:aspectUnit ] ;
    .

_:unitComparison a av:Step ;
    rdfs:label "Unit Comparison"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:LiteralValueComparisonProcessor ;
    p-plan:isPrecededBy _:unitLabelMapping ;
    av:hasParameter
        [av:key "aspect" ; av:value _:aspectUnit ] ,
        [av:key "variables" ; av:value "symbol", "oneEquals", "zeroAt" ] ;
    .

_:quantityKindComparison a av:Step ;
    rdfs:label "Quantity Kind Comparison"@en;
    p-plan:isStepOfPlan _:plan ;
    av:processorClass abecto:LiteralValueComparisonProcessor ;
    p-plan:isPrecededBy _:unitLabelMapping ;
    av:hasParameter
        [av:key "aspect" ; av:value _:aspectQuantityKind ] ,
        [av:key "variables" ; av:value "symbol", "timeDimensionExponent", "luminousIntensityDimensionExponent", "dimensionlessExponent", "amountOfSubstanceDimensionExponent", "electricCurrentDimensionExponent", "temperatureDimensionExponent", "massDimensionExponent", "lengthDimensionExponent" ] ;
    .
